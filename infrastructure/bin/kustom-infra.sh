#!/usr/bin/env bash
# B A S H ! ! !

#KUSTOMIZE yaml that has been checked into source control

if [ -z "$PROJECT_ROOT" ]; then
  source "../tooling/project-root.sh"
fi

# Initalize Constants etc
source "${PROJECT_ROOT}/tooling/bin/lib/constants.bash"

###
# Validate GetOpt is of correct version, if Mac see Wiki Devops Onboarding
getopt --test > /dev/null
if [[ $? -ne 4 ]]; then
  echo "${ERROR}The Latest version of GetOpt is required."
  echo "${ERROR}If Mac see Wiki Devops Onboarding."
  exit 1
fi

OPTIONS=h
LONGOPTIONS=config:

# -temporarily store output to be able to check for errors
# -e.g. use “--options” parameter by name to activate quoting/enhanced mode
# -pass arguments only via   -- "$@"   to separate them correctly
PARSED=$(getopt  --options=$OPTIONS --longoptions=$LONGOPTIONS --name "$0" -- "$@")
if [[ $? -ne 0 ]]; then
    # e.g. $? == 1
    #  then getopt has complained about wrong arguments to stdout
    exit 2
fi
# read getopt’s output this way to handle the quoting right:
eval set -- "$PARSED"

# now enjoy the options in order and nicely split until we see --
while true; do
    case "$1" in
        --config)
            KUSTOMIZE_CONFIG="$2"
            shift
            shift
            ;;
        *)
        KUBECTL_WHAT="$2"
        shift
        break
        ;;
    esac
done

export WORK_DIR="${PROJECT_ROOT}/infrastructure/kustomize/.workdir"

if [[ ! -d "$WORK_DIR" ]];  then
  mkdir -p $WORK_DIR
fi

#Start Time
start_time=`date +%s`

echo "${FYI} Start Time: `date`"

source "${INFRASTRUCTURE_BIN}/lib/init-env-key.bash"

# Get GIT and Shell ENV vars. This is warming up to create the tag-map
source "${PROJECT_ROOT}/tooling/bin/lib/get-local-vars.bash"

# There might be a specific cluster ID pre-set that will be the one that kustomize should use.  This is the case as in for developer-eks.sh
# Otherwise we default to the ENV_KEY which is typical

# Get the context (cluster name) that Kubectl is currently pointing to
# sets, CURRENT_KUBERNETES_CONTEXT
source "${INFRASTRUCTURE_BIN}/lib/get-kubernetes-context.bash"
if [[ -z "${CURRENT_KUBERNETES_CONTEXT}" ]]; then

  echo "${ERROR}No context set for kubectl to use."

  exit 79

fi

### Don't think I want to do this anymore.  Just use the K8s context. I'm ok with this because I'm not providing a process to use a different context than is already locally set
#if [[ -z ${CLUSTER_NAME} ]]; then
#  CLUSTER_NAME="${ENV_KEY}"
#fi
#
#echo "$FYI Cluster is $CLUSTER_NAME"

#Allow the passed in KUSTOMIZE_CONFIG to override the CURRENT_KUBERNETES_CONTEXT
if [[ -z ${KUSTOMIZE_CONFIG} ]]; then
  SOURCE_PATH="${PROJECT_ROOT}/infrastructure/kustomize/${CURRENT_KUBERNETES_CONTEXT}"
else
  SOURCE_PATH="${PROJECT_ROOT}/infrastructure/kustomize/${KUSTOMIZE_CONFIG}"
fi

if [[ ! -d "${SOURCE_PATH}" ]]; then

  echo "${ERROR} Unable to find working dir: ${SOURCE_PATH}"

  exit 77

fi


RM_CMD="rm -rf ${WORK_DIR}/*"
eval $RM_CMD

CP_CMD="cp -a ${SOURCE_PATH}/* ${WORK_DIR}/"
eval $CP_CMD

# Create the destination directory always to be the name of the existing context
export DESTINATION_DIR="${PROJECT_ROOT}/infrastructure/kubernetes/${CURRENT_KUBERNETES_CONTEXT}"
mkdir -p "$DESTINATION_DIR"

###
### Begin Kustomization
###

source "${PROJECT_ROOT}/infrastructure/kustomize/pre-kustomize.bash"

CREATION_DATE=$(date +%Y-%m-%dT%H:%M:%S%z)
DONT_EDIT=$(cat <<EOF
###
### DO NOT EDIT.  FILE GENERATED BY KUSTOMIZE
### ${CREATION_DATE}
###
### CURRENT_KUBERNETES_CONTEXT=$CURRENT_KUBERNETES_CONTEXT
### KUSTOMIZE_CONFIG=$KUSTOMIZE_CONFIG
###
EOF
)

###  Add some alaises because I get confused at times.
if [[ "$KUBECTL_WHAT" == "up" ]]; then
  KUBECTL_WHAT="apply"
elif  [[ "$KUBECTL_WHAT" == "down" ]]; then
  KUBECTL_WHAT="delete"
fi

if  [[ "$KUBECTL_WHAT" == "delete" ]]; then
  KUBECTL_OPTION="--ignore-not-found=true --force=true --grace-period=0"
fi


# if apply was actually specified then write the YAML to disk and apply it
if [[ "$KUBECTL_WHAT" == "write" ]]; then

  kustomize build "${WORK_DIR}/" | (echo "$DONT_EDIT" && cat) > "$DESTINATION_DIR/infrastructure.yaml"

elif [[ -n "$KUBECTL_WHAT" ]]; then

  kustomize build "${WORK_DIR}/" | (echo "$DONT_EDIT" && cat) > "$DESTINATION_DIR/infrastructure.yaml"

  K_CMD="kubectl $KUBECTL_WHAT ${KUBECTL_OPTION} -f  $DESTINATION_DIR"

  eval "${K_CMD}"

else # just output to STD out
  kustomize build "${WORK_DIR}/"
fi


end_time=`date +%s`

deltatime=$(( end_time - start_time ))
minutes=$(( deltatime / 60 ))
seconds=$(( deltatime % 60 ))

echo "$FYI End Time: `date`"
printf "$FYI Time spent: %02d:%02d\n" $minutes $seconds

if [[ "${EXIT_CODE}" > "0" ]]; then

  echo "\n${ERROR} Kubectl returned exit code ${EXIT_CODE}. Error messages should have been provided.\n"

  exit $EXIT_CODE
fi
