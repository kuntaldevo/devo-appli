
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    gzip  off;

    upstream eumtracer {
      server eum-us-west-2.instana.io:443;
      keepalive 6;
    }

    map $http_referer $instana_key {

       default "NOT-FOUND";

       ~*.paxata.com "nrdPxURdTGqoCRL4p_c7Fw";
       ~*paxata-dev.paxata.ninja "-jvjaIHtSpSL4PSbZp3I7w";
    }

    server {

      listen 80;

      location = /nginx_status {
         stub_status  on;
         access_log   off;

         add_header  Access-Control-Allow-Origin *;
       }

       location = / {
          return 301 https://$host$request_uri;
        }
    }

    server {

      listen       443 ssl;
      ssl_certificate     {certificate};
      ssl_certificate_key {key};

      location = /nginx_status {
         stub_status  on;
         access_log   off;

         add_header  Access-Control-Allow-Origin *;

       }

       location = / {

        access_by_lua_block {

          if ( ngx.var.instana_key == "NOT-FOUND" ) then
            ngx.status = 204
            ngx.header['Access-Control-Allow-Origin'] = "*"
            ngx.header['X-Paxata-Metrics'] = "key is not available for http_referer:  " .. ( ngx.var.http_referer or "nil" )
            return ngx.exit(204)
          end
        }

        rewrite_by_lua_block {

          if ( ngx.req.get_method() == "GET"  ) then
              local args, err = ngx.req.get_uri_args()
              args.k = ngx.var.instana_key
              ngx.req.set_uri_args(args)
          end

          if ( ngx.req.get_method() == "POST"  ) then
            ngx.req.read_body()
            local data = ngx.req.get_body_data()
            ngx.req.set_body_data( "k\t" .. ngx.var.instana_key .. "\n" .. data )
          end
        }

             proxy_pass https://eumtracer/;
# Debug Vars
#             proxy_set_header X-Real-IP $remote_addr;
#             add_header  X-Args  $args;
      }

# For retrieving the JavaScript use this one without setting all the extra stuff
      location ~ \.(js)$ {
         proxy_pass https://eumtracer;
      }

# For retrieving the JavaScript use this one without setting all the extra stuff
      location ~ \.(js.map)$ {
         proxy_pass https://eumtracer;
      }

    }
}
