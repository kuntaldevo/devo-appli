px.root.dir=/usr/local/paxata/server
px.demo=false
px.debug=false
px.clientId=pax-perf-1-gbonk.paxatadev.com
px.enrichment.sparql.endpoint=http://enrichment.paxata.com/sparql
px.enrichment.sparql.graph=
px.enrichment.value.redirect=http://enrichment.paxata.com

#The Pipeline Server, Default Port 8090
px.pipeline.url=http://pipeline-server:8090

#Passed to the Pipeline Server, where to find the library Default Port 9080
px.internal.server.url=http://paxata-server:9080/library


# The maximum number of simultaneous requests to a single pipeline master
px.pipeline.connection.routes=100

# The maximum number of simultaneous requests to all pipeline masters
px.pipeline.connection.total=100

px.tmp.dir=/usr/local/paxata/server/tmp
px.multipart.dir=/usr/local/paxata/server/tmp/multipart
px.upload.dir=/usr/local/paxata/server/tmp/upload

px.supported.locales=en

# Default pipeline for batch operations, if not set the standard pipeline is used
px.pipeline.batch.url=

# Default encoding for all JVMs
px.default.encoding=UTF8

# default hostname; tenant can have its own specific hostname url by setting it through REST API
px.default.hostname=http://localhost:8080
px.xmx=25g
px.xx.MaxPermSize=256m

px.request.parallelism=20

px.messaging.producerQueue=10000
px.messaging.consumerQueue=10000
px.messaging.consumerThreadPool=20

px.row.threshold=250000000
px.col.threshold=500

px.hdfs.include=*
px.hdfs.exclude=

px.pipeline.get.max.requests=60
px.pipeline.publish.max.requests=240
px.rest.api.threadPoolSize=25

#db-pedia
#px.enrichment.sparql.endpoint=http://dbpedia.org/sparql
#px.enrichment.sparql.graph=http://dbpedia.org
#px.enrichment.value.redirect=

# regex to enforce password strength. It must match the description defined by "password.strength" in frontend.properties file
px.password.pattern=^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*+=()]).{8,}$

#block 4
#valid modes are InVM, Embedded, and StandAlone.  Default mode is InVM.
#px.messaging.mode=Embedded

#Remote hosts are required for stand-alone mode; for embedded mode, this is used for clustering of the embedded hornetq servers
#px.messaging.remote.hosts=hornetq1.somecompany.com

#Used in embedded mode to identify the local machine
#px.messaging.local.host=localname.somecompany.com

#Port the messaging hosts are listening on
#px.messaging.port=5445
#end of the if for the specific cluster

#end for the if hornetq group names

# The following properties should be considered deprecated and are only useful for upgrading pre-February 2015 deployments.
# They are otherwise no longer used.
px.file.upload.size.limit=5368709120
# Number of threads to allocate to run automation
px.automation.scheduler.numThreads = 0
#number of seconds to delay scheduler waking up
px.automation.scheduler.intervalDelay = 60
#number of seconds to delay scheduler from it starting
px.automation.scheduler.initialDelay = 90

#number of seconds between checks
px.metadata.sync.scheduler.intervalDelay = 60
#number of seconds to delay initially
px.metadata.sync.scheduler.initialDelay = 10

# Thread pool size for library batch operations
px.library.coordinator.maxThreads = 20
# Max queue for waiting library batch operations
px.library.coordinator.maxQueueSize = 100
# The default maximum number of per tenant simultaneous library batch operations
px.library.coordinator.defaultTenantMax = 1

# Thread pool size for pipeline batch operations
px.pipeline.coordinator.maxThreads = 20
# Max queue for waiting pipeline batch operations
px.pipeline.coordinator.maxQueueSize = 100
# The default maximum number of per tenant simultaneous pipeline batch operations
px.pipeline.coordinator.defaultTenantMax = 1

# Thread pool size for non-batch REST API calls
px.rest.coordinator.maxThreads = 20
# Max queue for waiting non-batch REST API calls
px.rest.coordinator.maxQueueSize = 100
# The default maximum number of per tenant simultaneous REST API calls
px.rest.coordinator.defaultTenantMax = 5

# Timeout for queued REST requests in seconds
px.rest.timeout.seconds=30

# Number of minutes to wait for a batch before timing out
px.batch.wait.timeout=15
# Number of retry attempts before failing the batch job
px.batch.wait.retries=20

# Whether to use Java Cryptography Extension for encryption
px.encryption.use.jce=false
# This is a "random" salt used for password encryption. Please randomize this during install and back up the information
px.encryption.keypart=NMc0xwu1O5Q=

#
# the new PXEncryption service related parameters
#
# define the root directory for keystore files. All keystore files defined in encryption service config will be stored in this location
# make sure the Paxata application has read/write access to this folder.
# for local system, specify an absolute path.
# if the files are stored in the library storage in an HDFS file system, specify a relative path to the library root, prefixed by lib:
#For example,
px.encryption.keystore.rootDir=/absolute/path/to/keystore
px.encryption.keystore.rootDir=lib:keystore
px.encryption.keystore.rootDir=lib:keystore

# define the key bits.
# Note: Java only supports AES encryption with 128 bit keys out of the box
# if you want 192 or 256 bit keys then you need to install the “Java JCE Unlimited Strength Jurisdiction Policy Files” for your version of Java
px.encryption.keystore.keyBits=128

#
# define the system encryption service name. If this property is not specified, the system default service will be used.
px.encryption.serviceName=


#Email configurations
px.email.from.address=email@domain.com
#encryptable
px.email.password=password
px.email.smtp.host=smtp.domain.com
px.email.smtp.port=25
px.email.use.ssl=false

#The bounce address is the address you send bounces to if emails fail, e.g. the sysadmin distribution list, etc. It may
#be the same as the px.email.from.address
px.email.bounce.address=bounce-email@domain.com

# Global authentication method. Can be "pki" or empty
px.global.auth.method=

#
# SSO configuration
#
px.sso.JKSKeyManager.storeFile=/usr/local/paxata/server/certs/saml_paxatadev_com.jks
#encryptable
px.sso.JKSKeyManager.key=apollo
#encryptable
px.sso.JKSKeyManager.pass=nalle123

#security settings
# define the time interval to clear the security cache,
# which will invalidate all cached users' ACL data and force a reload.
# <0 to turn off cache invalidation
px.sec.aclCacheInvalidationIntervalMinutes=-1

# Max duration of browser session, in seconds
px.auth.cookie.duration.secs=1209600

# Configurable regex for extracting principal from X509 certificates. Only used in PKI auth mode.
px.pki.auth.subject-principal-regex=CN=.*?\\s(\\w+),

# Size of the cache of bundle to types
px.grammar.types.cache.size=50

#
# Audit log configuration
#

# Set to true to turn on audit logging
px.audit.log.enabled=true

# If set to true will add the tenant, user and subject names to the audit log
px.log.message.show.names=true

# The separator character used between multiple fields which consist of name/value pairs
px.log.message.fields.separator=|

# The separator character used between the name and value in a field
px.log.message.name.value.separator==

# The separator character used between entries when a field value is a list
px.log.message.value.list.separator=,

# Default to false to prevent against clickjacking vulnerability. See https://www.owasp.org/index.php/Clickjacking_Protection_for_Java_EE
px.html.allowEnclosingFrame=false

px.jdbc.prefetch.size=10000
px.jdbc.batch.size=10000

#
# Connector runner properties
#
px.factory.options.default.jvm=java
px.factory.options.default.jvm.args=-XX:+AggressiveOpts -XX:-UseCompressedOops -Xmx1024m -Xms512m
px.factory.options.default.log4j=/usr/local/paxata/server/config/connector-log4j.properties
px.factory.options.default.force.external=false
px.factory.options.default.idle.timeout=60
px.factory.options.default.debug=false
px.factory.options.default.debug.port=5005

# Flag to enable running a connector in a separate JVM
px.connector.runner.enabled=true

# Directory containing the external JVM connector runner
px.connector.runner.dir=/usr/local/paxata/server/connectors/runner

# The maximum number of simultaneous requests to a single connector
px.connector.runner.connection.routes=100

# The maximum number of simultaneous requests to all connectors
px.connector.runner.connection.total=100

# Directory containing the connector zip files that will automatically be installedwhen the server starts
px.connector.bootstrap.dir=/usr/local/paxata/server/connectors/bootstrap

# Directory connectors are unzipped and installed in
px.connector.repo.dir=/usr/local/paxata/server/connectors/repo

# The command to run when installing connectors that package shared object libraries
px.connector.ldconfig.cmd=ldconfig

# The number of data cell values to buffer when reading library files
# This value will be divided by the number of columns to determine how many rows to buffer on read
px.library.read.cell.buffer=100000

# The minimum number of rows to buffer no matter how many columns a dataset contains
px.library.read.min.rows=10

# The parquet compression codec used for data stored in the library.
# Valid values are UNCOMPRESSED, SNAPPY, GZIP and LZO
# NOTE: LZO is not recommended as it requires native libraries to be installed on the system
px.library.parquet.compression=GZIP

# Boolean flag indicating whether parquet data files stored in the library should use a dictionary to de-dup column values
# NOTE: Setting this value to true can cause out of memory issues when storing wide datasets
px.library.parquet.dictionary=false

# GuardRail Cache properties
px.guardrail.cache.max.size=100000
# expiration in minutes
px.guardrail.cache.expiration=10
